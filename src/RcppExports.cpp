// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// rcpparma_hello_world
arma::mat rcpparma_hello_world();
RcppExport SEXP _rfpar_rcpparma_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpparma_hello_world());
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_outerproduct
arma::mat rcpparma_outerproduct(const arma::colvec& x);
RcppExport SEXP _rfpar_rcpparma_outerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_outerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_innerproduct
double rcpparma_innerproduct(const arma::colvec& x);
RcppExport SEXP _rfpar_rcpparma_innerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_innerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_bothproducts
Rcpp::List rcpparma_bothproducts(const arma::colvec& x);
RcppExport SEXP _rfpar_rcpparma_bothproducts(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_bothproducts(x));
    return rcpp_result_gen;
END_RCPP
}
// set_seed_cpp
void set_seed_cpp(unsigned int seed);
RcppExport SEXP _rfpar_set_seed_cpp(SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    set_seed_cpp(seed);
    return R_NilValue;
END_RCPP
}
// find_midpoints_cpp
arma::vec find_midpoints_cpp(const arma::vec x);
RcppExport SEXP _rfpar_find_midpoints_cpp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(find_midpoints_cpp(x));
    return rcpp_result_gen;
END_RCPP
}
// decision_cpp
double decision_cpp(DataFrame tree, int node, NumericVector observation);
RcppExport SEXP _rfpar_decision_cpp(SEXP treeSEXP, SEXP nodeSEXP, SEXP observationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type tree(treeSEXP);
    Rcpp::traits::input_parameter< int >::type node(nodeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type observation(observationSEXP);
    rcpp_result_gen = Rcpp::wrap(decision_cpp(tree, node, observation));
    return rcpp_result_gen;
END_RCPP
}
// calculate_mse_cpp
double calculate_mse_cpp(const arma::vec& x);
RcppExport SEXP _rfpar_calculate_mse_cpp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(calculate_mse_cpp(x));
    return rcpp_result_gen;
END_RCPP
}
// make_reg_decision_rule_cpp
NumericVector make_reg_decision_rule_cpp(bool ss, const arma::vec& bag_out, const arma::mat& bag_feat, int n_feats, int seed, int min_node_size);
RcppExport SEXP _rfpar_make_reg_decision_rule_cpp(SEXP ssSEXP, SEXP bag_outSEXP, SEXP bag_featSEXP, SEXP n_featsSEXP, SEXP seedSEXP, SEXP min_node_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< bool >::type ss(ssSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type bag_out(bag_outSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type bag_feat(bag_featSEXP);
    Rcpp::traits::input_parameter< int >::type n_feats(n_featsSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< int >::type min_node_size(min_node_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(make_reg_decision_rule_cpp(ss, bag_out, bag_feat, n_feats, seed, min_node_size));
    return rcpp_result_gen;
END_RCPP
}
// build_reg_nodes_cpp
void build_reg_nodes_cpp(NumericMatrix tree_data, arma::umat& sample_set_data, arma::uword& node_i, const arma::vec& outcome_data, const arma::mat& feats_data, int n_feats_to_consider, int mns, bool seed, double isCh1);
RcppExport SEXP _rfpar_build_reg_nodes_cpp(SEXP tree_dataSEXP, SEXP sample_set_dataSEXP, SEXP node_iSEXP, SEXP outcome_dataSEXP, SEXP feats_dataSEXP, SEXP n_feats_to_considerSEXP, SEXP mnsSEXP, SEXP seedSEXP, SEXP isCh1SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type tree_data(tree_dataSEXP);
    Rcpp::traits::input_parameter< arma::umat& >::type sample_set_data(sample_set_dataSEXP);
    Rcpp::traits::input_parameter< arma::uword& >::type node_i(node_iSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type outcome_data(outcome_dataSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type feats_data(feats_dataSEXP);
    Rcpp::traits::input_parameter< int >::type n_feats_to_consider(n_feats_to_considerSEXP);
    Rcpp::traits::input_parameter< int >::type mns(mnsSEXP);
    Rcpp::traits::input_parameter< bool >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< double >::type isCh1(isCh1SEXP);
    build_reg_nodes_cpp(tree_data, sample_set_data, node_i, outcome_data, feats_data, n_feats_to_consider, mns, seed, isCh1);
    return R_NilValue;
END_RCPP
}
// generate_reg_tree_cpp
NumericMatrix generate_reg_tree_cpp(const arma::vec& bagged_outcome, const arma::mat& bagged_feats, const int n_feats, const int min_node_size, const bool setseed);
RcppExport SEXP _rfpar_generate_reg_tree_cpp(SEXP bagged_outcomeSEXP, SEXP bagged_featsSEXP, SEXP n_featsSEXP, SEXP min_node_sizeSEXP, SEXP setseedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type bagged_outcome(bagged_outcomeSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type bagged_feats(bagged_featsSEXP);
    Rcpp::traits::input_parameter< const int >::type n_feats(n_featsSEXP);
    Rcpp::traits::input_parameter< const int >::type min_node_size(min_node_sizeSEXP);
    Rcpp::traits::input_parameter< const bool >::type setseed(setseedSEXP);
    rcpp_result_gen = Rcpp::wrap(generate_reg_tree_cpp(bagged_outcome, bagged_feats, n_feats, min_node_size, setseed));
    return rcpp_result_gen;
END_RCPP
}
// predict_reg_cpp
NumericVector predict_reg_cpp(List forest, NumericMatrix train);
RcppExport SEXP _rfpar_predict_reg_cpp(SEXP forestSEXP, SEXP trainSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type forest(forestSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type train(trainSEXP);
    rcpp_result_gen = Rcpp::wrap(predict_reg_cpp(forest, train));
    return rcpp_result_gen;
END_RCPP
}
// calculate_gini_cpp
double calculate_gini_cpp(const arma::vec& x);
RcppExport SEXP _rfpar_calculate_gini_cpp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(calculate_gini_cpp(x));
    return rcpp_result_gen;
END_RCPP
}
// numeric_mode_cpp
double numeric_mode_cpp(const arma::vec& x);
RcppExport SEXP _rfpar_numeric_mode_cpp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(numeric_mode_cpp(x));
    return rcpp_result_gen;
END_RCPP
}
// make_class_decision_rule_cpp
NumericVector make_class_decision_rule_cpp(bool ss, const arma::vec& bag_out, const arma::mat& bag_feat, int n_feats, int seed, int min_node_size);
RcppExport SEXP _rfpar_make_class_decision_rule_cpp(SEXP ssSEXP, SEXP bag_outSEXP, SEXP bag_featSEXP, SEXP n_featsSEXP, SEXP seedSEXP, SEXP min_node_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< bool >::type ss(ssSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type bag_out(bag_outSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type bag_feat(bag_featSEXP);
    Rcpp::traits::input_parameter< int >::type n_feats(n_featsSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< int >::type min_node_size(min_node_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(make_class_decision_rule_cpp(ss, bag_out, bag_feat, n_feats, seed, min_node_size));
    return rcpp_result_gen;
END_RCPP
}
// build_class_nodes_cpp
void build_class_nodes_cpp(NumericMatrix tree_data, arma::umat& sample_set_data, arma::uword& node_i, const arma::vec& outcome_data, const arma::mat& feats_data, int n_feats_to_consider, int mns, bool seed, double isCh1);
RcppExport SEXP _rfpar_build_class_nodes_cpp(SEXP tree_dataSEXP, SEXP sample_set_dataSEXP, SEXP node_iSEXP, SEXP outcome_dataSEXP, SEXP feats_dataSEXP, SEXP n_feats_to_considerSEXP, SEXP mnsSEXP, SEXP seedSEXP, SEXP isCh1SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type tree_data(tree_dataSEXP);
    Rcpp::traits::input_parameter< arma::umat& >::type sample_set_data(sample_set_dataSEXP);
    Rcpp::traits::input_parameter< arma::uword& >::type node_i(node_iSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type outcome_data(outcome_dataSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type feats_data(feats_dataSEXP);
    Rcpp::traits::input_parameter< int >::type n_feats_to_consider(n_feats_to_considerSEXP);
    Rcpp::traits::input_parameter< int >::type mns(mnsSEXP);
    Rcpp::traits::input_parameter< bool >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< double >::type isCh1(isCh1SEXP);
    build_class_nodes_cpp(tree_data, sample_set_data, node_i, outcome_data, feats_data, n_feats_to_consider, mns, seed, isCh1);
    return R_NilValue;
END_RCPP
}
// generate_class_tree_cpp
NumericMatrix generate_class_tree_cpp(const arma::vec& bagged_outcome, const arma::mat& bagged_feats, const int n_feats, const int min_node_size, const bool setseed);
RcppExport SEXP _rfpar_generate_class_tree_cpp(SEXP bagged_outcomeSEXP, SEXP bagged_featsSEXP, SEXP n_featsSEXP, SEXP min_node_sizeSEXP, SEXP setseedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type bagged_outcome(bagged_outcomeSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type bagged_feats(bagged_featsSEXP);
    Rcpp::traits::input_parameter< const int >::type n_feats(n_featsSEXP);
    Rcpp::traits::input_parameter< const int >::type min_node_size(min_node_sizeSEXP);
    Rcpp::traits::input_parameter< const bool >::type setseed(setseedSEXP);
    rcpp_result_gen = Rcpp::wrap(generate_class_tree_cpp(bagged_outcome, bagged_feats, n_feats, min_node_size, setseed));
    return rcpp_result_gen;
END_RCPP
}
// predict_class_cpp
NumericVector predict_class_cpp(List forest, NumericMatrix train);
RcppExport SEXP _rfpar_predict_class_cpp(SEXP forestSEXP, SEXP trainSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type forest(forestSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type train(trainSEXP);
    rcpp_result_gen = Rcpp::wrap(predict_class_cpp(forest, train));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_rfpar_rcpparma_hello_world", (DL_FUNC) &_rfpar_rcpparma_hello_world, 0},
    {"_rfpar_rcpparma_outerproduct", (DL_FUNC) &_rfpar_rcpparma_outerproduct, 1},
    {"_rfpar_rcpparma_innerproduct", (DL_FUNC) &_rfpar_rcpparma_innerproduct, 1},
    {"_rfpar_rcpparma_bothproducts", (DL_FUNC) &_rfpar_rcpparma_bothproducts, 1},
    {"_rfpar_set_seed_cpp", (DL_FUNC) &_rfpar_set_seed_cpp, 1},
    {"_rfpar_find_midpoints_cpp", (DL_FUNC) &_rfpar_find_midpoints_cpp, 1},
    {"_rfpar_decision_cpp", (DL_FUNC) &_rfpar_decision_cpp, 3},
    {"_rfpar_calculate_mse_cpp", (DL_FUNC) &_rfpar_calculate_mse_cpp, 1},
    {"_rfpar_make_reg_decision_rule_cpp", (DL_FUNC) &_rfpar_make_reg_decision_rule_cpp, 6},
    {"_rfpar_build_reg_nodes_cpp", (DL_FUNC) &_rfpar_build_reg_nodes_cpp, 9},
    {"_rfpar_generate_reg_tree_cpp", (DL_FUNC) &_rfpar_generate_reg_tree_cpp, 5},
    {"_rfpar_predict_reg_cpp", (DL_FUNC) &_rfpar_predict_reg_cpp, 2},
    {"_rfpar_calculate_gini_cpp", (DL_FUNC) &_rfpar_calculate_gini_cpp, 1},
    {"_rfpar_numeric_mode_cpp", (DL_FUNC) &_rfpar_numeric_mode_cpp, 1},
    {"_rfpar_make_class_decision_rule_cpp", (DL_FUNC) &_rfpar_make_class_decision_rule_cpp, 6},
    {"_rfpar_build_class_nodes_cpp", (DL_FUNC) &_rfpar_build_class_nodes_cpp, 9},
    {"_rfpar_generate_class_tree_cpp", (DL_FUNC) &_rfpar_generate_class_tree_cpp, 5},
    {"_rfpar_predict_class_cpp", (DL_FUNC) &_rfpar_predict_class_cpp, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_rfpar(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
